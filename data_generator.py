import random
import datetime
import pandas as pd

# Define the three generator functions at the top level

def generate_orders(n=10):
    orders = []
    for i in range(n):
        order = {
            "SeqNum": i + 1,
            "OrderDetailsId": random.randint(100000, 999999),
            "OrderId": f"O{i}",
            "VersionId": f"V{i}",
            "EventType": random.choice(["Filled", "Partially Filled"]),
            "Type": random.choice(["Limit", "Market"]),
            "OrderFeedId": f"Feed{i}",
            "TimeInForce": random.choice(["GTC", "IOC"]),
            "InitialTime": datetime.datetime.now(),
            "OrderTime": datetime.datetime.now(),
            "ExecutionTime": datetime.datetime.now(),
            "CurrencyPair": "USD/EUR",
            "InstrumentCode": "XYZ",
            "SecurityClassId": "SEC123",
            "AssetClassId": "FX",
            "DealtCurrency": "USD",
            "Price": round(random.uniform(99, 101), 7),
            "Qty": round(random.uniform(1_000_000, 10_000_000), 8),
            "LeavesQty": 0,
            "CumulativeQty": 0,
            "FillQty": 0,
            "FillPrice": 0,
            "PartyId": f"Party{i}",
            "SalesBookId": f"Book{i}",
            "Side": random.choice(["Buy", "Sell"]),
            "Trader": f"Trader{i}",
            "IsParent": "N",
            "ParentId": None,
            "IsAmended": "N",
            "AmendedTime": None,
            "IsCancelled": "N",
            "CancelledTime": None,
            "IsMonitored": "Y",
            "IsClientOrder": "Y",
            "BaseCcyQty": round(random.uniform(1_000_000, 10_000_000), 8),
            "ReceivedTime": datetime.datetime.now(),
            "OrigCurrencyPair": "USD/EUR",
            "OrigPrice": round(random.uniform(99, 101), 7),
            "OrigSide": random.choice(["Buy", "Sell"]),
            "OrderFeedCounter": str(i),
            "OrderAltId": f"Alt{i}",
            "OrigOrderId": f"OrigO{i}",
            "ClientOrderId": f"ClientO{i}",
            "OrigClientOrderId": f"OrigClientO{i}",
            "ExpireTime": datetime.datetime.now(),
            "MarketId": "LSE",
            "MaturityDate": datetime.datetime.now().date(),
            "StrikePrice": round(random.uniform(90, 110), 7),
            "PutCall": random.choice(["P", "C"]),
            "PartyType": "Institution",
            "Desk": f"Desk{i}",
            "Value": round(random.uniform(1_000_000, 10_000_000), 8),
            "BaseCcyValue": round(random.uniform(1_000_000, 10_000_000), 8),
            "OrderBookPartyId": f"OBP{i}",
            "OrderAttrib1": "Attr1",
            "OrderAttrib2": "Attr2",
            "OrderAttrib3": "Attr3",
            "OrderAttrib4": "Attr4",
            "OrderAttrib5": "Attr5",
            "OrderAttrib6": "Attr6",
            "OrderAttrib7": "Attr7",
            "OrderAttrib8": "Attr8",
            "Comments": "Synthetic order",
            "DimPartyId": i,
            "DimDeskId": i,
            "DimTraderId": i,
            "DimSecurityClassId": i,
            "DimMarketId": i,
            "DimInstrumentId": i,
            "DimDate": datetime.datetime.now(),
            "DimTimeOfDay": datetime.datetime.now().time(),
            "DimSalesBookId": i,
            "Venue": "LSE",
            "IsCreated": "Y",
            "OrigQty": round(random.uniform(1_000_000, 10_000_000), 8),
            "DeskDescription": f"Desk {i} Description",
            "SettlementRef": f"Settle{i}",
            "ExecutionStrategy": "Aggressive",
            "Owner": f"Owner{i}",
            "Modifier": f"Modifier{i}",
            "DimModifierId": f"Mod{i}",
            "DimOwnerId": f"Own{i}",
            "OrigLeavesQty": 0,
            "LastFilledSize": 0,
            "LastFilledPrice": 0,
            "OrigExecAuthority": f"ExecAuth{i}",
            "PortfolioId": f"Port{i}",
            "ExecutionId": f"Exec{i}",
            "ParValue": round(random.uniform(1_000_000, 10_000_000), 7),
            "TradableItems": random.randint(1, 10),
            "NumberOfTradableItems": random.randint(1, 10),
            "QuoteType": "Firm",
            "SalesPerson": f"Sales{i}",
            "EventSummary": "Synthetic Event",
            "ClientName": f"Client{i}",
            "InternalCtpy": f"Internal{i}",
            "InstrumentRef1": "Ref1",
            "InstrumentRef2": "Ref2",
            "InstrumentQuoteType": "Spot",
            "SettlementDate": datetime.datetime.now(),
            "Position": "Long",
            "Region": "EMEA",
            "FIorIRDFlag": "FI",
            "ClientNucleusID": f"Nucleus{i}",
            "BankSide": "Buy",
            "ProductDescription": "FX Spot",
            "StellarOrderStatus": "New",
            "StellarTransactionStatus": "Pending",
            "StellarTransactionType": "Trade",
            "BaseCcyLeavesQty": 0,
            "IsSpreadOrder": "N",
            "LinkedOrder": None,
            "OrdInstrumentType": "FX",
            "OrdExecType": "Aggressive",
            "TrOrderStatus": "Open",
            "UnderlyingInstrumentCode": "UND123",
            "ComponentId": f"Comp{i}",
            "DimUnderlyingInstrumentId": i,
            "CancelCategory": "User",
            "CFICode": "EBSFX",
            "Origination": "Manual",
            "QtyNotation": "Units"
        }
        orders.append(order)
    return orders

def generate_trades(n=5):
    trades = []
    for i in range(n):
        trade = {
            "SeqNum": i + 1,
            "TradeEventId": random.randint(100000, 999999),
            "TradeFeedId": f"TF{i}",
            "TradeFeedCounter": str(i),
            "TradeId": f"T{i}",
            "TradeAltId": f"TA{i}",
            "EventType": random.choice(["TN", "TR"]),
            "AgreedTime": datetime.datetime.now(),
            "ReceivedTime": datetime.datetime.now(),
            "TradeType": "Spot",
            "TradeSubType": "Regular",
            "SecurityClass": "FX",
            "Symbol": "XYZ",
            "SymbolType": "Ticker",
            "SymbolDescription": "Synthetic Symbol",
            "InstrumentCode": "XYZ",
            "MarketId": "LSE",
            "Qty": random.randint(1_000_000, 10_000_000),
            "CumulativeQty": 0,
            "LeavesQty": 0,
            "ReceivedPrice": round(random.uniform(99, 101), 8),
            "Price": round(random.uniform(99, 101), 8),
            "Currency": "USD",
            "SettlementCurrency": "EUR",
            "Side": random.choice(["B", "S"]),
            "ExecutionType": "Aggressive",
            "MaturityDate": datetime.datetime.now().date(),
            "StrikePrice": round(random.uniform(90, 110), 7),
            "PutCall": random.choice(["P", "C"]),
            "BuyOrderId": f"BO{i}",
            "BuyPartyId": f"BP{i}",
            "BuyPartyType": "Institution",
            "BuyDesk": f"BD{i}",
            "BuyDeskType": "Sales",
            "BuyTrader": f"BT{i}",
            "SellOrderId": f"SO{i}",
            "SellPartyId": f"SP{i}",
            "SellPartyType": "Institution",
            "SellDesk": f"SD{i}",
            "SellDeskType": "Trading",
            "SellTrader": f"ST{i}",
            "TradeTime1": datetime.datetime.now(),
            "TradeTime2": datetime.datetime.now(),
            "TradeTime3": datetime.datetime.now(),
            "TradeAttrib1": "Attr1",
            "TradeAttrib2": "Attr2",
            "TradeAttrib3": "Attr3",
            "TradeAttrib4": "Attr4",
            "TradeAttrib5": "Attr5",
            "TradeAttrib6": "Attr6",
            "TradeAttrib7": "Attr7",
            "Comments": "Synthetic trade",
            "PrevTradeId": f"PT{i}",
            "IsCancelled": "N",
            "CancelTime": None,
            "IsAmended": "N",
            "AmendTime": None,
            "IsMonitored": "Y",
            "DataQualComment": "Valid",
            "ReceivedValue": round(random.uniform(1_000_000, 10_000_000), 8),
            "Value": round(random.uniform(1_000_000, 10_000_000), 8),
            "BaseCcyValue": round(random.uniform(1_000_000, 10_000_000), 8),
            "Consideration": round(random.uniform(1_000_000, 10_000_000), 8),
            "BaseCcyConsideration": round(random.uniform(1_000_000, 10_000_000), 8),
            "MarkUp": round(random.uniform(0, 10000), 8),
            "BaseCcyMarkUp": round(random.uniform(0, 10000), 8),
            "DimMarketId": i,
            "DimInstrumentId": i,
            "DimBuyPartyId": i,
            "DimBuyDeskId": i,
            "DimSellPartyId": i,
            "DimSellDeskId": i,
            "DimAgreedDate": datetime.datetime.now(),
            "DimAgreedTimeOfDay": datetime.datetime.now().time(),
            "DimReceivedDate": datetime.datetime.now(),
            "DimReceivedTimeOfDay": datetime.datetime.now().time(),
            "DimDate1": datetime.datetime.now(),
            "DimTimeOfDay1": datetime.datetime.now().time(),
            "DimDate2": datetime.datetime.now(),
            "DimTimeOfDay2": datetime.datetime.now().time(),
            "DimDate3": datetime.datetime.now(),
            "DimTimeOfDay3": datetime.datetime.now().time(),
            "DimBuyTraderId": i,
            "DimSellTraderId": i,
            "TradeAttrib8": "Attr8",
            "clr_code": "A",
            "solicited": "Y",
            "ProductName": "FX Spot",
            "ProductDescription": "Synthetic FX Trade",
            "ReferenceEntity": "EntityX",
            "RedCode": "RC123",
            "TraderComment": "Synthetic comment",
            "StartDate": datetime.datetime.now(),
            "DealReference": f"DR{i}",
            "SecTransId": f"STID{i}",
            "InterestRateType": "Fixed",
            "InterestRate": round(random.uniform(0, 10), 7),
            "Spread": round(random.uniform(0, 5), 7),
            "RefRate": "LIBOR",
            "LinkageReason": "Synthetic",
            "LinkedTradeId": f"LT{i}",
            "Location": "London",
            "BookOwner": f"BOwner{i}",
            "DimBookOwnerId": i,
            "IsTraderValid": True,
            "BrokerID": f"BID{i}",
            "Broker": f"Broker{i}",
            "IsOvernightDeal": False,
            "DataDate": datetime.datetime.now().date(),
            "StandardSpread": round(random.uniform(0, 5), 7),
            "BorrowerCIS": f"CIS{i}",
            "RepFrequency": "Monthly",
            "ProductState": "Active",
            "DealType": "Spot",
            "FacilityRid": f"FRID{i}",
            "FacilityName": f"Facility{i}",
            "LoanEffectiveDate": datetime.datetime.now(),
            "AssetClass": "FX",
            "EventDetails": "Synthetic Event",
            "FacilityTypeDescription": "Standard",
            "DiscountPremiumCurrency": "USD",
            "BuySellPct": round(random.uniform(0, 100), 7),
            "DealName": "Synthetic Deal",
            "Yield": round(random.uniform(0, 10), 8),
            "LegalEntity": "EntityX",
            "RepoRate": round(random.uniform(0, 5), 7),
            "Source": "Synthetic",
            "Venue": "LSE",
            "ECNReference": f"ECN{i}",
            "SettlementDate": datetime.datetime.now().date(),
            "IsMateriallyAmended": False
        }
        trades.append(trade)
    return trades

def generate_market_depth(n=10):
    depth = []
    for i in range(n):
        depth.append({
            "MarketDepthId": i + 1,
            "DimInstrumentId": i,
            "VenueId": i,
            "MarketTimestamp": datetime.datetime.now(),
            "BookLevel": random.randint(1, 5),
            "Side": random.choice(["Buy", "Sell"]),
            "Price": round(random.uniform(99, 101), 7),
            "Quantity": random.randint(1_000_000, 10_000_000),
            "ReceivedTime": datetime.datetime.now(),
            "FeedId": f"Feed{i}",
            "BaseCcyQuantity": round(random.uniform(1_000_000, 10_000_000), 8)
        })
    return depth

